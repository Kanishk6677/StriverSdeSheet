Reccursion
#include<bits/stdc++.h>
int f(int idx,int prev,int arr[],int n,vector<vector<int>>&dp)
{
    if(idx==n) return 0;
   
    if(dp[idx][prev+1]!=-1) return dp[idx][prev+1];
   int  pick=f(idx+1,prev,arr,n,dp);
    if(prev==-1 || arr[prev]<arr[idx])
    {
         pick=max(pick,1+f(idx+1,idx,arr,n,dp));
    }
    return dp[idx][prev+1]=pick;
}
int longestIncreasingSubsequence(int arr[], int n)
    
{
    vector<vector<int>>dp(n,vector<int>(n+1,-1));
    return f(0,-1,arr,n,dp);
}


// Memo

int f(int idx,int prev,int arr[],int n,vector<vector<int>>&dp)
{
    if(idx==n) return 0;
   
    if(dp[idx][prev+1]!=-1) return dp[idx][prev+1];
   int  pick=f(idx+1,prev,arr,n,dp);
    if(prev==-1 || arr[prev]<arr[idx])
    {
         pick=max(pick,1+f(idx+1,idx,arr,n,dp));
    }
    return dp[idx][prev+1]=pick;
}
int longestIncreasingSubsequence(int arr[], int n)
    
{
    vector<vector<int>>dp(n+1,vector<int>(n+1,0));
    for(int i=n-1;i>=0;i--)
    {
        for(int j=i-1;j>=-1;j--)
        {
         int pick=dp[i+1][j+1];
            if(j==-1||arr[j]<arr[i])
            {
            pick=max(pick,1+dp[i+1][i+1]);
            }
            dp[i][j+1]=pick;
        }
    }
    return dp[0][-1+1];
}
// Tabulation

#include<bits/stdc++.h>
int f(int idx,int prev,int arr[],int n,vector<vector<int>>&dp)
{
    if(idx==n) return 0;
   
    if(dp[idx][prev+1]!=-1) return dp[idx][prev+1];
   int  pick=f(idx+1,prev,arr,n,dp);
    if(prev==-1 || arr[prev]<arr[idx])
    {
         pick=max(pick,1+f(idx+1,idx,arr,n,dp));
    }
    return dp[idx][prev+1]=pick;
}
int longestIncreasingSubsequence(int arr[], int n)
    
{
    vector<int>next(n+1,0);
    vector<int>curr(n+1,0);
    for(int i=n-1;i>=0;i--)
    {
        for(int j=i-1;j>=-1;j--)
        {
         int pick=next[j+1];
            if(j==-1||arr[j]<arr[i])
            {
            pick=max(pick,1+next[i+1]);
            }
            curr[j+1]=pick;
        }
        next=curr;
    }
    return next[-1+1];
}


Space Optimised
int longestIncreasingSubsequence(int arr[], int n)
    
{
    vector<int>next(n+1,0);
    vector<int>curr(n+1,0);
    for(int i=n-1;i>=0;i--)
    {
        for(int j=i-1;j>=-1;j--)
        {
         int pick=next[j+1];
            if(j==-1||arr[j]<arr[i])
            {
            pick=max(pick,1+next[i+1]);
            }
            curr[j+1]=pick;
        }
        next=curr;
    }
    return next[-1+1];
}


// Further Optimised

#include<bits/stdc++.h>
int f(int idx,int prev,int arr[],int n,vector<vector<int>>&dp)
{
    if(idx==n) return 0;
   
    if(dp[idx][prev+1]!=-1) return dp[idx][prev+1];
   int  pick=f(idx+1,prev,arr,n,dp);
    if(prev==-1 || arr[prev]<arr[idx])
    {
         pick=max(pick,1+f(idx+1,idx,arr,n,dp));
    }
    return dp[idx][prev+1]=pick;
}
int longestIncreasingSubsequence(int arr[], int n)
    
{
    vector<int>dp(n,1);
    int maxii=1;
    for(int i=0;i<n;i++)
    {
        for(int prev=0;prev<i;prev++)
        {
            if(arr[prev]<arr[i])
                dp[i]=max(dp[i],1+dp[prev]);
        }
        maxii=max(dp[i],maxii);
    }
    return maxii;
}
