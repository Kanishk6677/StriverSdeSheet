#include<bits/stdc++.h>
int f(int idx,int W,vector<int> &values, vector<int> &weights,vector<vector<int>>&dp)
{
    if(idx==0)
    {
        if(weights[idx]<=W) return values[0]; return 0;
    }
    if(dp[idx][W]!=-1) return dp[idx][W];
    int notPick=f(idx-1,W,values,weights,dp);
    int pick=INT_MIN;
    if(weights[idx]<=W)
    pick=values[idx]+f(idx-1,W-weights[idx],values,weights,dp);
        return dp[idx][W]=max(pick,notPick);
}
int maxProfit(vector<int> &values, vector<int> &weights, int n, int W)
{
    vector<vector<int>>dp(n,vector<int>(W+1,-1));
        return f(n-1,W,values,weights,dp);
}

// Tabulation
#include<bits/stdc++.h>
int f(int idx,int W,vector<int> &values, vector<int> &weights,vector<vector<int>>&dp)
{
    if(idx==0)
    {
        if(weights[idx]<=W) return values[0]; return 0;
    }
    if(dp[idx][W]!=-1) return dp[idx][W];
    int notPick=f(idx-1,W,values,weights,dp);
    int pick=INT_MIN;
    if(weights[idx]<=W)
    pick=values[idx]+f(idx-1,W-weights[idx],values,weights,dp);
        return dp[idx][W]=max(pick,notPick);
}
int maxProfit(vector<int> &values, vector<int> &weights, int n, int W)
{
    vector<vector<int>>dp(n,vector<int>(W+1,0));
    for(int i=weights[0];i<=W;i++)
    {
        dp[0][i]=values[0];
    }
    for(int i=1;i<n;i++)
    {
        for(int j=0;j<=W;j++)
        {
            int notPick=dp[i-1][j];
            int pick=INT_MIN;
            if(j>=weights[i])
            {
                pick=values[i]+dp[i-1][j-weights[i]];
            }
                                
              dp[i][j]=max(pick,notPick);
            
        }
    }
    return dp[n-1][W];
       
}
                                
                                
